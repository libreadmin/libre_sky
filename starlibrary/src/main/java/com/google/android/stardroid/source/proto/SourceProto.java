// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source.proto

package com.google.android.stardroid.source.proto;

public final class SourceProto {
  private SourceProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Enumeration over shapes which can be drawn in the renderer.
   * </pre>
   *
   * Protobuf enum {@code stardroid_source.Shape}
   */
  public enum Shape
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>CIRCLE = 0;</code>
     */
    CIRCLE(0),
    /**
     * <code>STAR = 1;</code>
     */
    STAR(1),
    /**
     * <code>ELLIPTICAL_GALAXY = 2;</code>
     */
    ELLIPTICAL_GALAXY(2),
    /**
     * <code>SPIRAL_GALAXY = 3;</code>
     */
    SPIRAL_GALAXY(3),
    /**
     * <code>IRREGULAR_GALAXY = 4;</code>
     */
    IRREGULAR_GALAXY(4),
    /**
     * <code>LENTICULAR_GALAXY = 5;</code>
     */
    LENTICULAR_GALAXY(5),
    /**
     * <code>GLOBULAR_CLUSTER = 6;</code>
     */
    GLOBULAR_CLUSTER(6),
    /**
     * <code>OPEN_CLUSTER = 7;</code>
     */
    OPEN_CLUSTER(7),
    /**
     * <code>NEBULA = 8;</code>
     */
    NEBULA(8),
    /**
     * <code>HUBBLE_DEEP_FIELD = 9;</code>
     */
    HUBBLE_DEEP_FIELD(9),
    ;

    /**
     * <code>CIRCLE = 0;</code>
     */
    public static final int CIRCLE_VALUE = 0;
    /**
     * <code>STAR = 1;</code>
     */
    public static final int STAR_VALUE = 1;
    /**
     * <code>ELLIPTICAL_GALAXY = 2;</code>
     */
    public static final int ELLIPTICAL_GALAXY_VALUE = 2;
    /**
     * <code>SPIRAL_GALAXY = 3;</code>
     */
    public static final int SPIRAL_GALAXY_VALUE = 3;
    /**
     * <code>IRREGULAR_GALAXY = 4;</code>
     */
    public static final int IRREGULAR_GALAXY_VALUE = 4;
    /**
     * <code>LENTICULAR_GALAXY = 5;</code>
     */
    public static final int LENTICULAR_GALAXY_VALUE = 5;
    /**
     * <code>GLOBULAR_CLUSTER = 6;</code>
     */
    public static final int GLOBULAR_CLUSTER_VALUE = 6;
    /**
     * <code>OPEN_CLUSTER = 7;</code>
     */
    public static final int OPEN_CLUSTER_VALUE = 7;
    /**
     * <code>NEBULA = 8;</code>
     */
    public static final int NEBULA_VALUE = 8;
    /**
     * <code>HUBBLE_DEEP_FIELD = 9;</code>
     */
    public static final int HUBBLE_DEEP_FIELD_VALUE = 9;


    @Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static Shape valueOf(int value) {
      return forNumber(value);
    }

    public static Shape forNumber(int value) {
      switch (value) {
        case 0: return CIRCLE;
        case 1: return STAR;
        case 2: return ELLIPTICAL_GALAXY;
        case 3: return SPIRAL_GALAXY;
        case 4: return IRREGULAR_GALAXY;
        case 5: return LENTICULAR_GALAXY;
        case 6: return GLOBULAR_CLUSTER;
        case 7: return OPEN_CLUSTER;
        case 8: return NEBULA;
        case 9: return HUBBLE_DEEP_FIELD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Shape>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Shape> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Shape>() {
            @Override
            public Shape findValueByNumber(int number) {
              return Shape.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ShapeVerifier.INSTANCE;
    }

    private static final class ShapeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ShapeVerifier();
            @Override
            public boolean isInRange(int number) {
              return Shape.forNumber(number) != null;
            }
          };

    private final int value;

    private Shape(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stardroid_source.Shape)
  }

  public interface GeocentricCoordinatesProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.GeocentricCoordinatesProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     * @return Whether the rightAscension field is set.
     */
    boolean hasRightAscension();
    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     * @return The rightAscension.
     */
    float getRightAscension();

    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     * @return Whether the declination field is set.
     */
    boolean hasDeclination();
    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     * @return The declination.
     */
    float getDeclination();
  }
  /**
   * <pre>
   * Protocol buffer representation of the GeocentricCoordinates domain object.
   * </pre>
   *
   * Protobuf type {@code stardroid_source.GeocentricCoordinatesProto}
   */
  public  static final class GeocentricCoordinatesProto extends
      com.google.protobuf.GeneratedMessageLite<
          GeocentricCoordinatesProto, GeocentricCoordinatesProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.GeocentricCoordinatesProto)
      GeocentricCoordinatesProtoOrBuilder {
    private GeocentricCoordinatesProto() {
    }
    private int bitField0_;
    public static final int RIGHT_ASCENSION_FIELD_NUMBER = 1;
    private float rightAscension_;
    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     * @return Whether the rightAscension field is set.
     */
    @Override
    public boolean hasRightAscension() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     * @return The rightAscension.
     */
    @Override
    public float getRightAscension() {
      return rightAscension_;
    }
    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     * @param value The rightAscension to set.
     */
    private void setRightAscension(float value) {
      bitField0_ |= 0x00000001;
      rightAscension_ = value;
    }
    /**
     * <pre>
     * the right ascension of the object in degrees
     * </pre>
     *
     * <code>optional float right_ascension = 1;</code>
     */
    private void clearRightAscension() {
      bitField0_ = (bitField0_ & ~0x00000001);
      rightAscension_ = 0F;
    }

    public static final int DECLINATION_FIELD_NUMBER = 2;
    private float declination_;
    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     * @return Whether the declination field is set.
     */
    @Override
    public boolean hasDeclination() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     * @return The declination.
     */
    @Override
    public float getDeclination() {
      return declination_;
    }
    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     * @param value The declination to set.
     */
    private void setDeclination(float value) {
      bitField0_ |= 0x00000002;
      declination_ = value;
    }
    /**
     * <pre>
     * the declination of the object in degrees
     * </pre>
     *
     * <code>optional float declination = 2;</code>
     */
    private void clearDeclination() {
      bitField0_ = (bitField0_ & ~0x00000002);
      declination_ = 0F;
    }

    public static GeocentricCoordinatesProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GeocentricCoordinatesProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GeocentricCoordinatesProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GeocentricCoordinatesProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GeocentricCoordinatesProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static GeocentricCoordinatesProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static GeocentricCoordinatesProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GeocentricCoordinatesProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GeocentricCoordinatesProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static GeocentricCoordinatesProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static GeocentricCoordinatesProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static GeocentricCoordinatesProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(GeocentricCoordinatesProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Protocol buffer representation of the GeocentricCoordinates domain object.
     * </pre>
     *
     * Protobuf type {@code stardroid_source.GeocentricCoordinatesProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          GeocentricCoordinatesProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.GeocentricCoordinatesProto)
        GeocentricCoordinatesProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.GeocentricCoordinatesProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * the right ascension of the object in degrees
       * </pre>
       *
       * <code>optional float right_ascension = 1;</code>
       * @return Whether the rightAscension field is set.
       */
      @Override
      public boolean hasRightAscension() {
        return instance.hasRightAscension();
      }
      /**
       * <pre>
       * the right ascension of the object in degrees
       * </pre>
       *
       * <code>optional float right_ascension = 1;</code>
       * @return The rightAscension.
       */
      @Override
      public float getRightAscension() {
        return instance.getRightAscension();
      }
      /**
       * <pre>
       * the right ascension of the object in degrees
       * </pre>
       *
       * <code>optional float right_ascension = 1;</code>
       * @param value The rightAscension to set.
       * @return This builder for chaining.
       */
      public Builder setRightAscension(float value) {
        copyOnWrite();
        instance.setRightAscension(value);
        return this;
      }
      /**
       * <pre>
       * the right ascension of the object in degrees
       * </pre>
       *
       * <code>optional float right_ascension = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRightAscension() {
        copyOnWrite();
        instance.clearRightAscension();
        return this;
      }

      /**
       * <pre>
       * the declination of the object in degrees
       * </pre>
       *
       * <code>optional float declination = 2;</code>
       * @return Whether the declination field is set.
       */
      @Override
      public boolean hasDeclination() {
        return instance.hasDeclination();
      }
      /**
       * <pre>
       * the declination of the object in degrees
       * </pre>
       *
       * <code>optional float declination = 2;</code>
       * @return The declination.
       */
      @Override
      public float getDeclination() {
        return instance.getDeclination();
      }
      /**
       * <pre>
       * the declination of the object in degrees
       * </pre>
       *
       * <code>optional float declination = 2;</code>
       * @param value The declination to set.
       * @return This builder for chaining.
       */
      public Builder setDeclination(float value) {
        copyOnWrite();
        instance.setDeclination(value);
        return this;
      }
      /**
       * <pre>
       * the declination of the object in degrees
       * </pre>
       *
       * <code>optional float declination = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeclination() {
        copyOnWrite();
        instance.clearDeclination();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.GeocentricCoordinatesProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new GeocentricCoordinatesProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "rightAscension_",
              "declination_",
            };
            String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1001\u0000\u0002" +
                "\u1001\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<GeocentricCoordinatesProto> parser = PARSER;
          if (parser == null) {
            synchronized (GeocentricCoordinatesProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<GeocentricCoordinatesProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.GeocentricCoordinatesProto)
    private static final GeocentricCoordinatesProto DEFAULT_INSTANCE;
    static {
      GeocentricCoordinatesProto defaultInstance = new GeocentricCoordinatesProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        GeocentricCoordinatesProto.class, defaultInstance);
    }

    public static GeocentricCoordinatesProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GeocentricCoordinatesProto> PARSER;

    public static com.google.protobuf.Parser<GeocentricCoordinatesProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PointElementProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.PointElementProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     * @return The location.
     */
    GeocentricCoordinatesProto getLocation();

    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     * @return Whether the size field is set.
     */
    boolean hasSize();
    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     * @return The size.
     */
    int getSize();

    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     * @return Whether the shape field is set.
     */
    boolean hasShape();
    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     * @return The shape.
     */
    Shape getShape();
  }
  /**
   * <pre>
   * Message for a point object displayed in SkyMap
   * </pre>
   *
   * Protobuf type {@code stardroid_source.PointElementProto}
   */
  public  static final class PointElementProto extends
      com.google.protobuf.GeneratedMessageLite<
          PointElementProto, PointElementProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.PointElementProto)
      PointElementProtoOrBuilder {
    private PointElementProto() {
      color_ = -1;
      size_ = 3;
    }
    private int bitField0_;
    public static final int LOCATION_FIELD_NUMBER = 1;
    private GeocentricCoordinatesProto location_;
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @Override
    public GeocentricCoordinatesProto getLocation() {
      return location_ == null ? GeocentricCoordinatesProto.getDefaultInstance() : location_;
    }
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    private void setLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  location_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  if (location_ != null &&
          location_ != GeocentricCoordinatesProto.getDefaultInstance()) {
        location_ =
          GeocentricCoordinatesProto.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Location of the point source.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    @Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return The color.
     */
    @Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000002;
      color_ = value;
    }
    /**
     * <pre>
     * Color that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      color_ = -1;
    }

    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     * @return Whether the size field is set.
     */
    @Override
    public boolean hasSize() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     * @return The size.
     */
    @Override
    public int getSize() {
      return size_;
    }
    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     * @param value The size to set.
     */
    private void setSize(int value) {
      bitField0_ |= 0x00000004;
      size_ = value;
    }
    /**
     * <pre>
     * Width (in pixels) that the point should be in SkyMap.
     * </pre>
     *
     * <code>optional int32 size = 3 [default = 3];</code>
     */
    private void clearSize() {
      bitField0_ = (bitField0_ & ~0x00000004);
      size_ = 3;
    }

    public static final int SHAPE_FIELD_NUMBER = 4;
    private int shape_;
    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     * @return Whether the shape field is set.
     */
    @Override
    public boolean hasShape() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     * @return The shape.
     */
    @Override
    public Shape getShape() {
      Shape result = Shape.forNumber(shape_);
      return result == null ? Shape.CIRCLE : result;
    }
    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     * @param value The shape to set.
     */
    private void setShape(Shape value) {
      shape_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * Shape to use to draw this object in SkyMap.
     * </pre>
     *
     * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
     */
    private void clearShape() {
      bitField0_ = (bitField0_ & ~0x00000008);
      shape_ = 0;
    }

    public static PointElementProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static PointElementProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static PointElementProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static PointElementProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static PointElementProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static PointElementProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static PointElementProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static PointElementProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static PointElementProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static PointElementProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static PointElementProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static PointElementProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(PointElementProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for a point object displayed in SkyMap
     * </pre>
     *
     * Protobuf type {@code stardroid_source.PointElementProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          PointElementProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.PointElementProto)
        PointElementProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.PointElementProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      @Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      @Override
      public GeocentricCoordinatesProto getLocation() {
        return instance.getLocation();
      }
      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder setLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder setLocation(
          GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder mergeLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <pre>
       * Location of the point source.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      /**
       * <pre>
       * Color that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return Whether the color field is set.
       */
      @Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * Color that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return The color.
       */
      @Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * Color that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * Color that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * Width (in pixels) that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional int32 size = 3 [default = 3];</code>
       * @return Whether the size field is set.
       */
      @Override
      public boolean hasSize() {
        return instance.hasSize();
      }
      /**
       * <pre>
       * Width (in pixels) that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional int32 size = 3 [default = 3];</code>
       * @return The size.
       */
      @Override
      public int getSize() {
        return instance.getSize();
      }
      /**
       * <pre>
       * Width (in pixels) that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional int32 size = 3 [default = 3];</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(int value) {
        copyOnWrite();
        instance.setSize(value);
        return this;
      }
      /**
       * <pre>
       * Width (in pixels) that the point should be in SkyMap.
       * </pre>
       *
       * <code>optional int32 size = 3 [default = 3];</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        copyOnWrite();
        instance.clearSize();
        return this;
      }

      /**
       * <pre>
       * Shape to use to draw this object in SkyMap.
       * </pre>
       *
       * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
       * @return Whether the shape field is set.
       */
      @Override
      public boolean hasShape() {
        return instance.hasShape();
      }
      /**
       * <pre>
       * Shape to use to draw this object in SkyMap.
       * </pre>
       *
       * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
       * @return The shape.
       */
      @Override
      public Shape getShape() {
        return instance.getShape();
      }
      /**
       * <pre>
       * Shape to use to draw this object in SkyMap.
       * </pre>
       *
       * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
       * @param value The enum numeric value on the wire for shape to set.
       * @return This builder for chaining.
       */
      public Builder setShape(Shape value) {
        copyOnWrite();
        instance.setShape(value);
        return this;
      }
      /**
       * <pre>
       * Shape to use to draw this object in SkyMap.
       * </pre>
       *
       * <code>optional .stardroid_source.Shape shape = 4 [default = CIRCLE];</code>
       * @return This builder for chaining.
       */
      public Builder clearShape() {
        copyOnWrite();
        instance.clearShape();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.PointElementProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new PointElementProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "location_",
              "color_",
              "size_",
              "shape_",
              Shape.internalGetVerifier(),
            };
            String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u100b\u0001\u0003\u1004\u0002\u0004\u100c\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<PointElementProto> parser = PARSER;
          if (parser == null) {
            synchronized (PointElementProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<PointElementProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.PointElementProto)
    private static final PointElementProto DEFAULT_INSTANCE;
    static {
      PointElementProto defaultInstance = new PointElementProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PointElementProto.class, defaultInstance);
    }

    public static PointElementProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PointElementProto> PARSER;

    public static com.google.protobuf.Parser<PointElementProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LabelElementProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.LabelElementProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     * @return Whether the location field is set.
     */
    boolean hasLocation();
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     * @return The location.
     */
    GeocentricCoordinatesProto getLocation();

    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     * @return Whether the stringsIntId field is set.
     */
    boolean hasStringsIntId();
    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     * @return The stringsIntId.
     */
    int getStringsIntId();

    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return Whether the stringsStrId field is set.
     */
    boolean hasStringsStrId();
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return The stringsStrId.
     */
    String getStringsStrId();
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return The bytes for stringsStrId.
     */
    com.google.protobuf.ByteString
        getStringsStrIdBytes();

    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     * @return Whether the fontSize field is set.
     */
    boolean hasFontSize();
    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     * @return The fontSize.
     */
    int getFontSize();

    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     * @return Whether the offset field is set.
     */
    boolean hasOffset();
    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     * @return The offset.
     */
    float getOffset();
  }
  /**
   * <pre>
   * Message for label (text string) displayed in SkyMap
   * Nextid: 7
   * </pre>
   *
   * Protobuf type {@code stardroid_source.LabelElementProto}
   */
  public  static final class LabelElementProto extends
      com.google.protobuf.GeneratedMessageLite<
          LabelElementProto, LabelElementProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.LabelElementProto)
      LabelElementProtoOrBuilder {
    private LabelElementProto() {
      color_ = -1;
      stringsStrId_ = "";
      fontSize_ = 15;
      offset_ = 0.02F;
    }
    private int bitField0_;
    public static final int LOCATION_FIELD_NUMBER = 1;
    private GeocentricCoordinatesProto location_;
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @Override
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @Override
    public GeocentricCoordinatesProto getLocation() {
      return location_ == null ? GeocentricCoordinatesProto.getDefaultInstance() : location_;
    }
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    private void setLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  location_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  if (location_ != null &&
          location_ != GeocentricCoordinatesProto.getDefaultInstance()) {
        location_ =
          GeocentricCoordinatesProto.newBuilder(location_).mergeFrom(value).buildPartial();
      } else {
        location_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Location on which this label should be drawn.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
     */
    private void clearLocation() {  location_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    @Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @return The color.
     */
    @Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000002;
      color_ = value;
    }
    /**
     * <pre>
     * Color that the text should be displayed in.
     * </pre>
     *
     * <code>optional uint32 color = 2 [default = 4294967295];</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      color_ = -1;
    }

    public static final int STRINGS_INT_ID_FIELD_NUMBER = 3;
    private int stringsIntId_;
    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     * @return Whether the stringsIntId field is set.
     */
    @Override
    public boolean hasStringsIntId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     * @return The stringsIntId.
     */
    @Override
    public int getStringsIntId() {
      return stringsIntId_;
    }
    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     * @param value The stringsIntId to set.
     */
    private void setStringsIntId(int value) {
      bitField0_ |= 0x00000004;
      stringsIntId_ = value;
    }
    /**
     * <pre>
     * Index in the strings.xml file of the string that should be displayed for
     * this label and its string counterpart (usuall snake cased).
     * </pre>
     *
     * <code>optional int32 strings_int_id = 3;</code>
     */
    private void clearStringsIntId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      stringsIntId_ = 0;
    }

    public static final int STRINGS_STR_ID_FIELD_NUMBER = 6;
    private String stringsStrId_;
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return Whether the stringsStrId field is set.
     */
    @Override
    public boolean hasStringsStrId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return The stringsStrId.
     */
    @Override
    public String getStringsStrId() {
      return stringsStrId_;
    }
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @return The bytes for stringsStrId.
     */
    @Override
    public com.google.protobuf.ByteString
        getStringsStrIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(stringsStrId_);
    }
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @param value The stringsStrId to set.
     */
    private void setStringsStrId(
        String value) {
      value.getClass();
  bitField0_ |= 0x00000008;
      stringsStrId_ = value;
    }
    /**
     * <code>optional string strings_str_id = 6;</code>
     */
    private void clearStringsStrId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      stringsStrId_ = getDefaultInstance().getStringsStrId();
    }
    /**
     * <code>optional string strings_str_id = 6;</code>
     * @param value The bytes for stringsStrId to set.
     */
    private void setStringsStrIdBytes(
        com.google.protobuf.ByteString value) {
      stringsStrId_ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static final int FONT_SIZE_FIELD_NUMBER = 4;
    private int fontSize_;
    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     * @return Whether the fontSize field is set.
     */
    @Override
    public boolean hasFontSize() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     * @return The fontSize.
     */
    @Override
    public int getFontSize() {
      return fontSize_;
    }
    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     * @param value The fontSize to set.
     */
    private void setFontSize(int value) {
      bitField0_ |= 0x00000010;
      fontSize_ = value;
    }
    /**
     * <pre>
     * Size of the font (in pixels) that should be used to draw this label.
     * </pre>
     *
     * <code>optional int32 font_size = 4 [default = 15];</code>
     */
    private void clearFontSize() {
      bitField0_ = (bitField0_ & ~0x00000010);
      fontSize_ = 15;
    }

    public static final int OFFSET_FIELD_NUMBER = 5;
    private float offset_;
    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     * @return Whether the offset field is set.
     */
    @Override
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     * @return The offset.
     */
    @Override
    public float getOffset() {
      return offset_;
    }
    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     * @param value The offset to set.
     */
    private void setOffset(float value) {
      bitField0_ |= 0x00000020;
      offset_ = value;
    }
    /**
     * <pre>
     * Angle in degrees by which the text should be shifted from the location
     * Offsets are typically non-zero to ensure that the text of an object does
     * not obscure the object itself.
     * </pre>
     *
     * <code>optional float offset = 5 [default = 0.02];</code>
     */
    private void clearOffset() {
      bitField0_ = (bitField0_ & ~0x00000020);
      offset_ = 0.02F;
    }

    public static LabelElementProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LabelElementProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LabelElementProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LabelElementProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LabelElementProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LabelElementProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LabelElementProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static LabelElementProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static LabelElementProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static LabelElementProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static LabelElementProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static LabelElementProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(LabelElementProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for label (text string) displayed in SkyMap
     * Nextid: 7
     * </pre>
     *
     * Protobuf type {@code stardroid_source.LabelElementProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          LabelElementProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.LabelElementProto)
        LabelElementProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.LabelElementProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      @Override
      public boolean hasLocation() {
        return instance.hasLocation();
      }
      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      @Override
      public GeocentricCoordinatesProto getLocation() {
        return instance.getLocation();
      }
      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder setLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
        }
      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder setLocation(
          GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.setLocation(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder mergeLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.mergeLocation(value);
        return this;
      }
      /**
       * <pre>
       * Location on which this label should be drawn.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto location = 1;</code>
       */
      public Builder clearLocation() {  copyOnWrite();
        instance.clearLocation();
        return this;
      }

      /**
       * <pre>
       * Color that the text should be displayed in.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return Whether the color field is set.
       */
      @Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * Color that the text should be displayed in.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return The color.
       */
      @Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * Color that the text should be displayed in.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * Color that the text should be displayed in.
       * </pre>
       *
       * <code>optional uint32 color = 2 [default = 4294967295];</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * Index in the strings.xml file of the string that should be displayed for
       * this label and its string counterpart (usuall snake cased).
       * </pre>
       *
       * <code>optional int32 strings_int_id = 3;</code>
       * @return Whether the stringsIntId field is set.
       */
      @Override
      public boolean hasStringsIntId() {
        return instance.hasStringsIntId();
      }
      /**
       * <pre>
       * Index in the strings.xml file of the string that should be displayed for
       * this label and its string counterpart (usuall snake cased).
       * </pre>
       *
       * <code>optional int32 strings_int_id = 3;</code>
       * @return The stringsIntId.
       */
      @Override
      public int getStringsIntId() {
        return instance.getStringsIntId();
      }
      /**
       * <pre>
       * Index in the strings.xml file of the string that should be displayed for
       * this label and its string counterpart (usuall snake cased).
       * </pre>
       *
       * <code>optional int32 strings_int_id = 3;</code>
       * @param value The stringsIntId to set.
       * @return This builder for chaining.
       */
      public Builder setStringsIntId(int value) {
        copyOnWrite();
        instance.setStringsIntId(value);
        return this;
      }
      /**
       * <pre>
       * Index in the strings.xml file of the string that should be displayed for
       * this label and its string counterpart (usuall snake cased).
       * </pre>
       *
       * <code>optional int32 strings_int_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringsIntId() {
        copyOnWrite();
        instance.clearStringsIntId();
        return this;
      }

      /**
       * <code>optional string strings_str_id = 6;</code>
       * @return Whether the stringsStrId field is set.
       */
      @Override
      public boolean hasStringsStrId() {
        return instance.hasStringsStrId();
      }
      /**
       * <code>optional string strings_str_id = 6;</code>
       * @return The stringsStrId.
       */
      @Override
      public String getStringsStrId() {
        return instance.getStringsStrId();
      }
      /**
       * <code>optional string strings_str_id = 6;</code>
       * @return The bytes for stringsStrId.
       */
      @Override
      public com.google.protobuf.ByteString
          getStringsStrIdBytes() {
        return instance.getStringsStrIdBytes();
      }
      /**
       * <code>optional string strings_str_id = 6;</code>
       * @param value The stringsStrId to set.
       * @return This builder for chaining.
       */
      public Builder setStringsStrId(
          String value) {
        copyOnWrite();
        instance.setStringsStrId(value);
        return this;
      }
      /**
       * <code>optional string strings_str_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringsStrId() {
        copyOnWrite();
        instance.clearStringsStrId();
        return this;
      }
      /**
       * <code>optional string strings_str_id = 6;</code>
       * @param value The bytes for stringsStrId to set.
       * @return This builder for chaining.
       */
      public Builder setStringsStrIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setStringsStrIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * Size of the font (in pixels) that should be used to draw this label.
       * </pre>
       *
       * <code>optional int32 font_size = 4 [default = 15];</code>
       * @return Whether the fontSize field is set.
       */
      @Override
      public boolean hasFontSize() {
        return instance.hasFontSize();
      }
      /**
       * <pre>
       * Size of the font (in pixels) that should be used to draw this label.
       * </pre>
       *
       * <code>optional int32 font_size = 4 [default = 15];</code>
       * @return The fontSize.
       */
      @Override
      public int getFontSize() {
        return instance.getFontSize();
      }
      /**
       * <pre>
       * Size of the font (in pixels) that should be used to draw this label.
       * </pre>
       *
       * <code>optional int32 font_size = 4 [default = 15];</code>
       * @param value The fontSize to set.
       * @return This builder for chaining.
       */
      public Builder setFontSize(int value) {
        copyOnWrite();
        instance.setFontSize(value);
        return this;
      }
      /**
       * <pre>
       * Size of the font (in pixels) that should be used to draw this label.
       * </pre>
       *
       * <code>optional int32 font_size = 4 [default = 15];</code>
       * @return This builder for chaining.
       */
      public Builder clearFontSize() {
        copyOnWrite();
        instance.clearFontSize();
        return this;
      }

      /**
       * <pre>
       * Angle in degrees by which the text should be shifted from the location
       * Offsets are typically non-zero to ensure that the text of an object does
       * not obscure the object itself.
       * </pre>
       *
       * <code>optional float offset = 5 [default = 0.02];</code>
       * @return Whether the offset field is set.
       */
      @Override
      public boolean hasOffset() {
        return instance.hasOffset();
      }
      /**
       * <pre>
       * Angle in degrees by which the text should be shifted from the location
       * Offsets are typically non-zero to ensure that the text of an object does
       * not obscure the object itself.
       * </pre>
       *
       * <code>optional float offset = 5 [default = 0.02];</code>
       * @return The offset.
       */
      @Override
      public float getOffset() {
        return instance.getOffset();
      }
      /**
       * <pre>
       * Angle in degrees by which the text should be shifted from the location
       * Offsets are typically non-zero to ensure that the text of an object does
       * not obscure the object itself.
       * </pre>
       *
       * <code>optional float offset = 5 [default = 0.02];</code>
       * @param value The offset to set.
       * @return This builder for chaining.
       */
      public Builder setOffset(float value) {
        copyOnWrite();
        instance.setOffset(value);
        return this;
      }
      /**
       * <pre>
       * Angle in degrees by which the text should be shifted from the location
       * Offsets are typically non-zero to ensure that the text of an object does
       * not obscure the object itself.
       * </pre>
       *
       * <code>optional float offset = 5 [default = 0.02];</code>
       * @return This builder for chaining.
       */
      public Builder clearOffset() {
        copyOnWrite();
        instance.clearOffset();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.LabelElementProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new LabelElementProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "location_",
              "color_",
              "stringsIntId_",
              "fontSize_",
              "offset_",
              "stringsStrId_",
            };
            String info =
                "\u0001\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u100b\u0001\u0003\u1004\u0002\u0004\u1004\u0004\u0005\u1001\u0005\u0006\u1008\u0003" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<LabelElementProto> parser = PARSER;
          if (parser == null) {
            synchronized (LabelElementProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<LabelElementProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.LabelElementProto)
    private static final LabelElementProto DEFAULT_INSTANCE;
    static {
      LabelElementProto defaultInstance = new LabelElementProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        LabelElementProto.class, defaultInstance);
    }

    public static LabelElementProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LabelElementProto> PARSER;

    public static com.google.protobuf.Parser<LabelElementProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LineElementProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.LineElementProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     * @return Whether the lineWidth field is set.
     */
    boolean hasLineWidth();
    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     * @return The lineWidth.
     */
    float getLineWidth();

    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    java.util.List<GeocentricCoordinatesProto>
        getVertexList();
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    GeocentricCoordinatesProto getVertex(int index);
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    int getVertexCount();
  }
  /**
   * <pre>
   * Message for a line displayed in SkyMap
   * </pre>
   *
   * Protobuf type {@code stardroid_source.LineElementProto}
   */
  public  static final class LineElementProto extends
      com.google.protobuf.GeneratedMessageLite<
          LineElementProto, LineElementProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.LineElementProto)
      LineElementProtoOrBuilder {
    private LineElementProto() {
      color_ = -1;
      lineWidth_ = 1.5F;
      vertex_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     * @return Whether the color field is set.
     */
    @Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     * @return The color.
     */
    @Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000001;
      color_ = value;
    }
    /**
     * <pre>
     * Color that should be used to draw the line.
     * </pre>
     *
     * <code>optional uint32 color = 1 [default = 4294967295];</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      color_ = -1;
    }

    public static final int LINE_WIDTH_FIELD_NUMBER = 2;
    private float lineWidth_;
    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     * @return Whether the lineWidth field is set.
     */
    @Override
    public boolean hasLineWidth() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     * @return The lineWidth.
     */
    @Override
    public float getLineWidth() {
      return lineWidth_;
    }
    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     * @param value The lineWidth to set.
     */
    private void setLineWidth(float value) {
      bitField0_ |= 0x00000002;
      lineWidth_ = value;
    }
    /**
     * <pre>
     * the width of the line in pixels.
     * </pre>
     *
     * <code>optional float line_width = 2 [default = 1.5];</code>
     */
    private void clearLineWidth() {
      bitField0_ = (bitField0_ & ~0x00000002);
      lineWidth_ = 1.5F;
    }

    public static final int VERTEX_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<GeocentricCoordinatesProto> vertex_;
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    @Override
    public java.util.List<GeocentricCoordinatesProto> getVertexList() {
      return vertex_;
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    public java.util.List<? extends GeocentricCoordinatesProtoOrBuilder>
        getVertexOrBuilderList() {
      return vertex_;
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    @Override
    public int getVertexCount() {
      return vertex_.size();
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    @Override
    public GeocentricCoordinatesProto getVertex(int index) {
      return vertex_.get(index);
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    public GeocentricCoordinatesProtoOrBuilder getVertexOrBuilder(
        int index) {
      return vertex_.get(index);
    }
    private void ensureVertexIsMutable() {
      com.google.protobuf.Internal.ProtobufList<GeocentricCoordinatesProto> tmp = vertex_;
      if (!tmp.isModifiable()) {
        vertex_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void setVertex(
        int index, GeocentricCoordinatesProto value) {
      value.getClass();
  ensureVertexIsMutable();
      vertex_.set(index, value);
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void addVertex(GeocentricCoordinatesProto value) {
      value.getClass();
  ensureVertexIsMutable();
      vertex_.add(value);
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void addVertex(
        int index, GeocentricCoordinatesProto value) {
      value.getClass();
  ensureVertexIsMutable();
      vertex_.add(index, value);
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void addAllVertex(
        Iterable<? extends GeocentricCoordinatesProto> values) {
      ensureVertexIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, vertex_);
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void clearVertex() {
      vertex_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Vertices of the line.  This array should never have less than two objects.
     * </pre>
     *
     * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
     */
    private void removeVertex(int index) {
      ensureVertexIsMutable();
      vertex_.remove(index);
    }

    public static LineElementProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LineElementProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LineElementProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LineElementProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LineElementProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static LineElementProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static LineElementProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static LineElementProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static LineElementProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static LineElementProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static LineElementProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static LineElementProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(LineElementProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for a line displayed in SkyMap
     * </pre>
     *
     * Protobuf type {@code stardroid_source.LineElementProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          LineElementProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.LineElementProto)
        LineElementProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.LineElementProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Color that should be used to draw the line.
       * </pre>
       *
       * <code>optional uint32 color = 1 [default = 4294967295];</code>
       * @return Whether the color field is set.
       */
      @Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * Color that should be used to draw the line.
       * </pre>
       *
       * <code>optional uint32 color = 1 [default = 4294967295];</code>
       * @return The color.
       */
      @Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * Color that should be used to draw the line.
       * </pre>
       *
       * <code>optional uint32 color = 1 [default = 4294967295];</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * Color that should be used to draw the line.
       * </pre>
       *
       * <code>optional uint32 color = 1 [default = 4294967295];</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * the width of the line in pixels.
       * </pre>
       *
       * <code>optional float line_width = 2 [default = 1.5];</code>
       * @return Whether the lineWidth field is set.
       */
      @Override
      public boolean hasLineWidth() {
        return instance.hasLineWidth();
      }
      /**
       * <pre>
       * the width of the line in pixels.
       * </pre>
       *
       * <code>optional float line_width = 2 [default = 1.5];</code>
       * @return The lineWidth.
       */
      @Override
      public float getLineWidth() {
        return instance.getLineWidth();
      }
      /**
       * <pre>
       * the width of the line in pixels.
       * </pre>
       *
       * <code>optional float line_width = 2 [default = 1.5];</code>
       * @param value The lineWidth to set.
       * @return This builder for chaining.
       */
      public Builder setLineWidth(float value) {
        copyOnWrite();
        instance.setLineWidth(value);
        return this;
      }
      /**
       * <pre>
       * the width of the line in pixels.
       * </pre>
       *
       * <code>optional float line_width = 2 [default = 1.5];</code>
       * @return This builder for chaining.
       */
      public Builder clearLineWidth() {
        copyOnWrite();
        instance.clearLineWidth();
        return this;
      }

      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      @Override
      public java.util.List<GeocentricCoordinatesProto> getVertexList() {
        return java.util.Collections.unmodifiableList(
            instance.getVertexList());
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      @Override
      public int getVertexCount() {
        return instance.getVertexCount();
      }/**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      @Override
      public GeocentricCoordinatesProto getVertex(int index) {
        return instance.getVertex(index);
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder setVertex(
          int index, GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.setVertex(index, value);
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder setVertex(
          int index, GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.setVertex(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder addVertex(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.addVertex(value);
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder addVertex(
          int index, GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.addVertex(index, value);
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder addVertex(
          GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.addVertex(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder addVertex(
          int index, GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.addVertex(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder addAllVertex(
          Iterable<? extends GeocentricCoordinatesProto> values) {
        copyOnWrite();
        instance.addAllVertex(values);
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder clearVertex() {
        copyOnWrite();
        instance.clearVertex();
        return this;
      }
      /**
       * <pre>
       * Vertices of the line.  This array should never have less than two objects.
       * </pre>
       *
       * <code>repeated .stardroid_source.GeocentricCoordinatesProto vertex = 3;</code>
       */
      public Builder removeVertex(int index) {
        copyOnWrite();
        instance.removeVertex(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.LineElementProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new LineElementProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "color_",
              "lineWidth_",
              "vertex_",
              GeocentricCoordinatesProto.class,
            };
            String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u100b\u0000\u0002" +
                "\u1001\u0001\u0003\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<LineElementProto> parser = PARSER;
          if (parser == null) {
            synchronized (LineElementProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<LineElementProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.LineElementProto)
    private static final LineElementProto DEFAULT_INSTANCE;
    static {
      LineElementProto defaultInstance = new LineElementProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        LineElementProto.class, defaultInstance);
    }

    public static LineElementProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LineElementProto> PARSER;

    public static com.google.protobuf.Parser<LineElementProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AstronomicalSourceProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.AstronomicalSourceProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @return A list containing the nameIntIds.
     */
    java.util.List<Integer> getNameIntIdsList();
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @return The count of nameIntIds.
     */
    int getNameIntIdsCount();
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The nameIntIds at the given index.
     */
    int getNameIntIds(int index);

    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @return A list containing the nameStrIds.
     */
    java.util.List<String>
        getNameStrIdsList();
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @return The count of nameStrIds.
     */
    int getNameStrIdsCount();
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param index The index of the element to return.
     * @return The nameStrIds at the given index.
     */
    String getNameStrIds(int index);
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param index The index of the element to return.
     * @return The nameStrIds at the given index.
     */
    com.google.protobuf.ByteString
        getNameStrIdsBytes(int index);

    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     * @return Whether the searchLocation field is set.
     */
    boolean hasSearchLocation();
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     * @return The searchLocation.
     */
    GeocentricCoordinatesProto getSearchLocation();

    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     * @return Whether the searchLevel field is set.
     */
    boolean hasSearchLevel();
    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     * @return The searchLevel.
     */
    float getSearchLevel();

    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     * @return Whether the level field is set.
     */
    boolean hasLevel();
    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     * @return The level.
     */
    float getLevel();

    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    java.util.List<PointElementProto>
        getPointList();
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    PointElementProto getPoint(int index);
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    int getPointCount();

    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    java.util.List<LabelElementProto>
        getLabelList();
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    LabelElementProto getLabel(int index);
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    int getLabelCount();

    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    java.util.List<LineElementProto>
        getLineList();
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    LineElementProto getLine(int index);
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    int getLineCount();
  }
  /**
   * <pre>
   * This message corresponds to a single astronomical object.  For instance,
   * this message could represent a constellation.  This constellation is
   * composed of its stars (points), the lines which draw its shape, as well as
   * its label.
   * TODO(brent): add support for images.
   * nextid: 9
   * </pre>
   *
   * Protobuf type {@code stardroid_source.AstronomicalSourceProto}
   */
  public  static final class AstronomicalSourceProto extends
      com.google.protobuf.GeneratedMessageLite<
          AstronomicalSourceProto, AstronomicalSourceProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.AstronomicalSourceProto)
      AstronomicalSourceProtoOrBuilder {
    private AstronomicalSourceProto() {
      nameIntIds_ = emptyIntList();
      nameStrIds_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      point_ = emptyProtobufList();
      label_ = emptyProtobufList();
      line_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int NAME_INT_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList nameIntIds_;
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @return A list containing the nameIntIds.
     */
    @Override
    public java.util.List<Integer>
        getNameIntIdsList() {
      return nameIntIds_;
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @return The count of nameIntIds.
     */
    @Override
    public int getNameIntIdsCount() {
      return nameIntIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The nameIntIds at the given index.
     */
    @Override
    public int getNameIntIds(int index) {
      return nameIntIds_.getInt(index);
    }
    private void ensureNameIntIdsIsMutable() {
      com.google.protobuf.Internal.IntList tmp = nameIntIds_;
      if (!tmp.isModifiable()) {
        nameIntIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The nameIntIds to set.
     */
    private void setNameIntIds(
        int index, int value) {
      ensureNameIntIdsIsMutable();
      nameIntIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @param value The nameIntIds to add.
     */
    private void addNameIntIds(int value) {
      ensureNameIntIdsIsMutable();
      nameIntIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     * @param values The nameIntIds to add.
     */
    private void addAllNameIntIds(
        Iterable<? extends Integer> values) {
      ensureNameIntIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, nameIntIds_);
    }
    /**
     * <pre>
     * Ids of the strings in the strings.xml file which correspond to names for
     * this object.
     * </pre>
     *
     * <code>repeated uint32 name_int_ids = 1;</code>
     */
    private void clearNameIntIds() {
      nameIntIds_ = emptyIntList();
    }

    public static final int NAME_STR_IDS_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.ProtobufList<String> nameStrIds_;
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @return A list containing the nameStrIds.
     */
    @Override
    public java.util.List<String> getNameStrIdsList() {
      return nameStrIds_;
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @return The count of nameStrIds.
     */
    @Override
    public int getNameStrIdsCount() {
      return nameStrIds_.size();
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param index The index of the element to return.
     * @return The nameStrIds at the given index.
     */
    @Override
    public String getNameStrIds(int index) {
      return nameStrIds_.get(index);
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the nameStrIds at the given index.
     */
    @Override
    public com.google.protobuf.ByteString
        getNameStrIdsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          nameStrIds_.get(index));
    }
    private void ensureNameStrIdsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<String> tmp =
          nameStrIds_;  if (!tmp.isModifiable()) {
        nameStrIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param index The index to set the value at.
     * @param value The nameStrIds to set.
     */
    private void setNameStrIds(
        int index, String value) {
      value.getClass();
  ensureNameStrIdsIsMutable();
      nameStrIds_.set(index, value);
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param value The nameStrIds to add.
     */
    private void addNameStrIds(
        String value) {
      value.getClass();
  ensureNameStrIdsIsMutable();
      nameStrIds_.add(value);
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param values The nameStrIds to add.
     */
    private void addAllNameStrIds(
        Iterable<String> values) {
      ensureNameStrIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, nameStrIds_);
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     */
    private void clearNameStrIds() {
      nameStrIds_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * The string ids into the strings.xml file - usually snake cased versions of the common
     * names.
     * </pre>
     *
     * <code>repeated string name_str_ids = 8;</code>
     * @param value The bytes of the nameStrIds to add.
     */
    private void addNameStrIdsBytes(
        com.google.protobuf.ByteString value) {
      ensureNameStrIdsIsMutable();
      nameStrIds_.add(value.toStringUtf8());
    }

    public static final int SEARCH_LOCATION_FIELD_NUMBER = 2;
    private GeocentricCoordinatesProto searchLocation_;
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     */
    @Override
    public boolean hasSearchLocation() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     */
    @Override
    public GeocentricCoordinatesProto getSearchLocation() {
      return searchLocation_ == null ? GeocentricCoordinatesProto.getDefaultInstance() : searchLocation_;
    }
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     */
    private void setSearchLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  searchLocation_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     */
    @SuppressWarnings({"ReferenceEquality"})
    private void mergeSearchLocation(GeocentricCoordinatesProto value) {
      value.getClass();
  if (searchLocation_ != null &&
          searchLocation_ != GeocentricCoordinatesProto.getDefaultInstance()) {
        searchLocation_ =
          GeocentricCoordinatesProto.newBuilder(searchLocation_).mergeFrom(value).buildPartial();
      } else {
        searchLocation_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * The location to which SkyMap should direct the user.
     * </pre>
     *
     * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
     */
    private void clearSearchLocation() {  searchLocation_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int SEARCH_LEVEL_FIELD_NUMBER = 3;
    private float searchLevel_;
    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     * @return Whether the searchLevel field is set.
     */
    @Override
    public boolean hasSearchLevel() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     * @return The searchLevel.
     */
    @Override
    public float getSearchLevel() {
      return searchLevel_;
    }
    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     * @param value The searchLevel to set.
     */
    private void setSearchLevel(float value) {
      bitField0_ |= 0x00000002;
      searchLevel_ = value;
    }
    /**
     * <pre>
     * The level to which SkyMap should zoom to automatically when searching for
     * the object in manual mode.
     * </pre>
     *
     * <code>optional float search_level = 3 [default = 0];</code>
     */
    private void clearSearchLevel() {
      bitField0_ = (bitField0_ & ~0x00000002);
      searchLevel_ = 0F;
    }

    public static final int LEVEL_FIELD_NUMBER = 4;
    private float level_;
    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     * @return Whether the level field is set.
     */
    @Override
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     * @return The level.
     */
    @Override
    public float getLevel() {
      return level_;
    }
    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     * @param value The level to set.
     */
    private void setLevel(float value) {
      bitField0_ |= 0x00000004;
      level_ = value;
    }
    /**
     * <pre>
     * The level at which this object becomes visible.
     * </pre>
     *
     * <code>optional float level = 4 [default = 0];</code>
     */
    private void clearLevel() {
      bitField0_ = (bitField0_ & ~0x00000004);
      level_ = 0F;
    }

    public static final int POINT_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<PointElementProto> point_;
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    @Override
    public java.util.List<PointElementProto> getPointList() {
      return point_;
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    public java.util.List<? extends PointElementProtoOrBuilder>
        getPointOrBuilderList() {
      return point_;
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    @Override
    public int getPointCount() {
      return point_.size();
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    @Override
    public PointElementProto getPoint(int index) {
      return point_.get(index);
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    public PointElementProtoOrBuilder getPointOrBuilder(
        int index) {
      return point_.get(index);
    }
    private void ensurePointIsMutable() {
      com.google.protobuf.Internal.ProtobufList<PointElementProto> tmp = point_;
      if (!tmp.isModifiable()) {
        point_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void setPoint(
        int index, PointElementProto value) {
      value.getClass();
  ensurePointIsMutable();
      point_.set(index, value);
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void addPoint(PointElementProto value) {
      value.getClass();
  ensurePointIsMutable();
      point_.add(value);
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void addPoint(
        int index, PointElementProto value) {
      value.getClass();
  ensurePointIsMutable();
      point_.add(index, value);
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void addAllPoint(
        Iterable<? extends PointElementProto> values) {
      ensurePointIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, point_);
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void clearPoint() {
      point_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Points which comprise this objects (e.g. the stars).
     * </pre>
     *
     * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
     */
    private void removePoint(int index) {
      ensurePointIsMutable();
      point_.remove(index);
    }

    public static final int LABEL_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<LabelElementProto> label_;
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    @Override
    public java.util.List<LabelElementProto> getLabelList() {
      return label_;
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    public java.util.List<? extends LabelElementProtoOrBuilder>
        getLabelOrBuilderList() {
      return label_;
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    @Override
    public int getLabelCount() {
      return label_.size();
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    @Override
    public LabelElementProto getLabel(int index) {
      return label_.get(index);
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    public LabelElementProtoOrBuilder getLabelOrBuilder(
        int index) {
      return label_.get(index);
    }
    private void ensureLabelIsMutable() {
      com.google.protobuf.Internal.ProtobufList<LabelElementProto> tmp = label_;
      if (!tmp.isModifiable()) {
        label_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void setLabel(
        int index, LabelElementProto value) {
      value.getClass();
  ensureLabelIsMutable();
      label_.set(index, value);
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void addLabel(LabelElementProto value) {
      value.getClass();
  ensureLabelIsMutable();
      label_.add(value);
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void addLabel(
        int index, LabelElementProto value) {
      value.getClass();
  ensureLabelIsMutable();
      label_.add(index, value);
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void addAllLabel(
        Iterable<? extends LabelElementProto> values) {
      ensureLabelIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, label_);
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void clearLabel() {
      label_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Labels which comprise this objects (e.g. the name).
     * </pre>
     *
     * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
     */
    private void removeLabel(int index) {
      ensureLabelIsMutable();
      label_.remove(index);
    }

    public static final int LINE_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.ProtobufList<LineElementProto> line_;
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    @Override
    public java.util.List<LineElementProto> getLineList() {
      return line_;
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    public java.util.List<? extends LineElementProtoOrBuilder>
        getLineOrBuilderList() {
      return line_;
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    @Override
    public int getLineCount() {
      return line_.size();
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    @Override
    public LineElementProto getLine(int index) {
      return line_.get(index);
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    public LineElementProtoOrBuilder getLineOrBuilder(
        int index) {
      return line_.get(index);
    }
    private void ensureLineIsMutable() {
      com.google.protobuf.Internal.ProtobufList<LineElementProto> tmp = line_;
      if (!tmp.isModifiable()) {
        line_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void setLine(
        int index, LineElementProto value) {
      value.getClass();
  ensureLineIsMutable();
      line_.set(index, value);
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void addLine(LineElementProto value) {
      value.getClass();
  ensureLineIsMutable();
      line_.add(value);
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void addLine(
        int index, LineElementProto value) {
      value.getClass();
  ensureLineIsMutable();
      line_.add(index, value);
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void addAllLine(
        Iterable<? extends LineElementProto> values) {
      ensureLineIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, line_);
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void clearLine() {
      line_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Lines which comprise this objects (e.g. lines of the constellation).
     * </pre>
     *
     * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
     */
    private void removeLine(int index) {
      ensureLineIsMutable();
      line_.remove(index);
    }

    public static AstronomicalSourceProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourceProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourceProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourceProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourceProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourceProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourceProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourceProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static AstronomicalSourceProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourceProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static AstronomicalSourceProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourceProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(AstronomicalSourceProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This message corresponds to a single astronomical object.  For instance,
     * this message could represent a constellation.  This constellation is
     * composed of its stars (points), the lines which draw its shape, as well as
     * its label.
     * TODO(brent): add support for images.
     * nextid: 9
     * </pre>
     *
     * Protobuf type {@code stardroid_source.AstronomicalSourceProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          AstronomicalSourceProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.AstronomicalSourceProto)
        AstronomicalSourceProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.AstronomicalSourceProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @return A list containing the nameIntIds.
       */
      @Override
      public java.util.List<Integer>
          getNameIntIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getNameIntIdsList());
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @return The count of nameIntIds.
       */
      @Override
      public int getNameIntIdsCount() {
        return instance.getNameIntIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @param index The index of the element to return.
       * @return The nameIntIds at the given index.
       */
      @Override
      public int getNameIntIds(int index) {
        return instance.getNameIntIds(index);
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @param value The nameIntIds to set.
       * @return This builder for chaining.
       */
      public Builder setNameIntIds(
          int index, int value) {
        copyOnWrite();
        instance.setNameIntIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @param value The nameIntIds to add.
       * @return This builder for chaining.
       */
      public Builder addNameIntIds(int value) {
        copyOnWrite();
        instance.addNameIntIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @param values The nameIntIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllNameIntIds(
          Iterable<? extends Integer> values) {
        copyOnWrite();
        instance.addAllNameIntIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings in the strings.xml file which correspond to names for
       * this object.
       * </pre>
       *
       * <code>repeated uint32 name_int_ids = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameIntIds() {
        copyOnWrite();
        instance.clearNameIntIds();
        return this;
      }

      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @return A list containing the nameStrIds.
       */
      @Override
      public java.util.List<String>
          getNameStrIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getNameStrIdsList());
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @return The count of nameStrIds.
       */
      @Override
      public int getNameStrIdsCount() {
        return instance.getNameStrIdsCount();
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param index The index of the element to return.
       * @return The nameStrIds at the given index.
       */
      @Override
      public String getNameStrIds(int index) {
        return instance.getNameStrIds(index);
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param index The index of the value to return.
       * @return The bytes of the nameStrIds at the given index.
       */
      @Override
      public com.google.protobuf.ByteString
          getNameStrIdsBytes(int index) {
        return instance.getNameStrIdsBytes(index);
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param index The index to set the value at.
       * @param value The nameStrIds to set.
       * @return This builder for chaining.
       */
      public Builder setNameStrIds(
          int index, String value) {
        copyOnWrite();
        instance.setNameStrIds(index, value);
        return this;
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param value The nameStrIds to add.
       * @return This builder for chaining.
       */
      public Builder addNameStrIds(
          String value) {
        copyOnWrite();
        instance.addNameStrIds(value);
        return this;
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param values The nameStrIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllNameStrIds(
          Iterable<String> values) {
        copyOnWrite();
        instance.addAllNameStrIds(values);
        return this;
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameStrIds() {
        copyOnWrite();
        instance.clearNameStrIds();
        return this;
      }
      /**
       * <pre>
       * The string ids into the strings.xml file - usually snake cased versions of the common
       * names.
       * </pre>
       *
       * <code>repeated string name_str_ids = 8;</code>
       * @param value The bytes of the nameStrIds to add.
       * @return This builder for chaining.
       */
      public Builder addNameStrIdsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addNameStrIdsBytes(value);
        return this;
      }

      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      @Override
      public boolean hasSearchLocation() {
        return instance.hasSearchLocation();
      }
      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      @Override
      public GeocentricCoordinatesProto getSearchLocation() {
        return instance.getSearchLocation();
      }
      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      public Builder setSearchLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.setSearchLocation(value);
        return this;
        }
      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      public Builder setSearchLocation(
          GeocentricCoordinatesProto.Builder builderForValue) {
        copyOnWrite();
        instance.setSearchLocation(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      public Builder mergeSearchLocation(GeocentricCoordinatesProto value) {
        copyOnWrite();
        instance.mergeSearchLocation(value);
        return this;
      }
      /**
       * <pre>
       * The location to which SkyMap should direct the user.
       * </pre>
       *
       * <code>optional .stardroid_source.GeocentricCoordinatesProto search_location = 2;</code>
       */
      public Builder clearSearchLocation() {  copyOnWrite();
        instance.clearSearchLocation();
        return this;
      }

      /**
       * <pre>
       * The level to which SkyMap should zoom to automatically when searching for
       * the object in manual mode.
       * </pre>
       *
       * <code>optional float search_level = 3 [default = 0];</code>
       * @return Whether the searchLevel field is set.
       */
      @Override
      public boolean hasSearchLevel() {
        return instance.hasSearchLevel();
      }
      /**
       * <pre>
       * The level to which SkyMap should zoom to automatically when searching for
       * the object in manual mode.
       * </pre>
       *
       * <code>optional float search_level = 3 [default = 0];</code>
       * @return The searchLevel.
       */
      @Override
      public float getSearchLevel() {
        return instance.getSearchLevel();
      }
      /**
       * <pre>
       * The level to which SkyMap should zoom to automatically when searching for
       * the object in manual mode.
       * </pre>
       *
       * <code>optional float search_level = 3 [default = 0];</code>
       * @param value The searchLevel to set.
       * @return This builder for chaining.
       */
      public Builder setSearchLevel(float value) {
        copyOnWrite();
        instance.setSearchLevel(value);
        return this;
      }
      /**
       * <pre>
       * The level to which SkyMap should zoom to automatically when searching for
       * the object in manual mode.
       * </pre>
       *
       * <code>optional float search_level = 3 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSearchLevel() {
        copyOnWrite();
        instance.clearSearchLevel();
        return this;
      }

      /**
       * <pre>
       * The level at which this object becomes visible.
       * </pre>
       *
       * <code>optional float level = 4 [default = 0];</code>
       * @return Whether the level field is set.
       */
      @Override
      public boolean hasLevel() {
        return instance.hasLevel();
      }
      /**
       * <pre>
       * The level at which this object becomes visible.
       * </pre>
       *
       * <code>optional float level = 4 [default = 0];</code>
       * @return The level.
       */
      @Override
      public float getLevel() {
        return instance.getLevel();
      }
      /**
       * <pre>
       * The level at which this object becomes visible.
       * </pre>
       *
       * <code>optional float level = 4 [default = 0];</code>
       * @param value The level to set.
       * @return This builder for chaining.
       */
      public Builder setLevel(float value) {
        copyOnWrite();
        instance.setLevel(value);
        return this;
      }
      /**
       * <pre>
       * The level at which this object becomes visible.
       * </pre>
       *
       * <code>optional float level = 4 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearLevel() {
        copyOnWrite();
        instance.clearLevel();
        return this;
      }

      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      @Override
      public java.util.List<PointElementProto> getPointList() {
        return java.util.Collections.unmodifiableList(
            instance.getPointList());
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      @Override
      public int getPointCount() {
        return instance.getPointCount();
      }/**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      @Override
      public PointElementProto getPoint(int index) {
        return instance.getPoint(index);
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder setPoint(
          int index, PointElementProto value) {
        copyOnWrite();
        instance.setPoint(index, value);
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder setPoint(
          int index, PointElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.setPoint(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder addPoint(PointElementProto value) {
        copyOnWrite();
        instance.addPoint(value);
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder addPoint(
          int index, PointElementProto value) {
        copyOnWrite();
        instance.addPoint(index, value);
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder addPoint(
          PointElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addPoint(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder addPoint(
          int index, PointElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addPoint(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder addAllPoint(
          Iterable<? extends PointElementProto> values) {
        copyOnWrite();
        instance.addAllPoint(values);
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder clearPoint() {
        copyOnWrite();
        instance.clearPoint();
        return this;
      }
      /**
       * <pre>
       * Points which comprise this objects (e.g. the stars).
       * </pre>
       *
       * <code>repeated .stardroid_source.PointElementProto point = 5;</code>
       */
      public Builder removePoint(int index) {
        copyOnWrite();
        instance.removePoint(index);
        return this;
      }

      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      @Override
      public java.util.List<LabelElementProto> getLabelList() {
        return java.util.Collections.unmodifiableList(
            instance.getLabelList());
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      @Override
      public int getLabelCount() {
        return instance.getLabelCount();
      }/**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      @Override
      public LabelElementProto getLabel(int index) {
        return instance.getLabel(index);
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder setLabel(
          int index, LabelElementProto value) {
        copyOnWrite();
        instance.setLabel(index, value);
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder setLabel(
          int index, LabelElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.setLabel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder addLabel(LabelElementProto value) {
        copyOnWrite();
        instance.addLabel(value);
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder addLabel(
          int index, LabelElementProto value) {
        copyOnWrite();
        instance.addLabel(index, value);
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder addLabel(
          LabelElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addLabel(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder addLabel(
          int index, LabelElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addLabel(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder addAllLabel(
          Iterable<? extends LabelElementProto> values) {
        copyOnWrite();
        instance.addAllLabel(values);
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }
      /**
       * <pre>
       * Labels which comprise this objects (e.g. the name).
       * </pre>
       *
       * <code>repeated .stardroid_source.LabelElementProto label = 6;</code>
       */
      public Builder removeLabel(int index) {
        copyOnWrite();
        instance.removeLabel(index);
        return this;
      }

      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      @Override
      public java.util.List<LineElementProto> getLineList() {
        return java.util.Collections.unmodifiableList(
            instance.getLineList());
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      @Override
      public int getLineCount() {
        return instance.getLineCount();
      }/**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      @Override
      public LineElementProto getLine(int index) {
        return instance.getLine(index);
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder setLine(
          int index, LineElementProto value) {
        copyOnWrite();
        instance.setLine(index, value);
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder setLine(
          int index, LineElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.setLine(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder addLine(LineElementProto value) {
        copyOnWrite();
        instance.addLine(value);
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder addLine(
          int index, LineElementProto value) {
        copyOnWrite();
        instance.addLine(index, value);
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder addLine(
          LineElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addLine(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder addLine(
          int index, LineElementProto.Builder builderForValue) {
        copyOnWrite();
        instance.addLine(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder addAllLine(
          Iterable<? extends LineElementProto> values) {
        copyOnWrite();
        instance.addAllLine(values);
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder clearLine() {
        copyOnWrite();
        instance.clearLine();
        return this;
      }
      /**
       * <pre>
       * Lines which comprise this objects (e.g. lines of the constellation).
       * </pre>
       *
       * <code>repeated .stardroid_source.LineElementProto line = 7;</code>
       */
      public Builder removeLine(int index) {
        copyOnWrite();
        instance.removeLine(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.AstronomicalSourceProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new AstronomicalSourceProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "bitField0_",
              "nameIntIds_",
              "searchLocation_",
              "searchLevel_",
              "level_",
              "point_",
              PointElementProto.class,
              "label_",
              LabelElementProto.class,
              "line_",
              LineElementProto.class,
              "nameStrIds_",
            };
            String info =
                "\u0001\b\u0000\u0001\u0001\b\b\u0000\u0005\u0000\u0001\u001d\u0002\u1009\u0000\u0003" +
                "\u1001\u0001\u0004\u1001\u0002\u0005\u001b\u0006\u001b\u0007\u001b\b\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<AstronomicalSourceProto> parser = PARSER;
          if (parser == null) {
            synchronized (AstronomicalSourceProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<AstronomicalSourceProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.AstronomicalSourceProto)
    private static final AstronomicalSourceProto DEFAULT_INSTANCE;
    static {
      AstronomicalSourceProto defaultInstance = new AstronomicalSourceProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        AstronomicalSourceProto.class, defaultInstance);
    }

    public static AstronomicalSourceProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AstronomicalSourceProto> PARSER;

    public static com.google.protobuf.Parser<AstronomicalSourceProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AstronomicalSourcesProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stardroid_source.AstronomicalSourcesProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    java.util.List<AstronomicalSourceProto>
        getSourceList();
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    AstronomicalSourceProto getSource(int index);
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    int getSourceCount();
  }
  /**
   * <pre>
   * A collection of AstronomicalSources
   * </pre>
   *
   * Protobuf type {@code stardroid_source.AstronomicalSourcesProto}
   */
  public  static final class AstronomicalSourcesProto extends
      com.google.protobuf.GeneratedMessageLite<
          AstronomicalSourcesProto, AstronomicalSourcesProto.Builder> implements
      // @@protoc_insertion_point(message_implements:stardroid_source.AstronomicalSourcesProto)
      AstronomicalSourcesProtoOrBuilder {
    private AstronomicalSourcesProto() {
      source_ = emptyProtobufList();
    }
    public static final int SOURCE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<AstronomicalSourceProto> source_;
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    @Override
    public java.util.List<AstronomicalSourceProto> getSourceList() {
      return source_;
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    public java.util.List<? extends AstronomicalSourceProtoOrBuilder>
        getSourceOrBuilderList() {
      return source_;
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    @Override
    public int getSourceCount() {
      return source_.size();
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    @Override
    public AstronomicalSourceProto getSource(int index) {
      return source_.get(index);
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    public AstronomicalSourceProtoOrBuilder getSourceOrBuilder(
        int index) {
      return source_.get(index);
    }
    private void ensureSourceIsMutable() {
      com.google.protobuf.Internal.ProtobufList<AstronomicalSourceProto> tmp = source_;
      if (!tmp.isModifiable()) {
        source_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void setSource(
        int index, AstronomicalSourceProto value) {
      value.getClass();
  ensureSourceIsMutable();
      source_.set(index, value);
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void addSource(AstronomicalSourceProto value) {
      value.getClass();
  ensureSourceIsMutable();
      source_.add(value);
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void addSource(
        int index, AstronomicalSourceProto value) {
      value.getClass();
  ensureSourceIsMutable();
      source_.add(index, value);
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void addAllSource(
        Iterable<? extends AstronomicalSourceProto> values) {
      ensureSourceIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, source_);
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void clearSource() {
      source_ = emptyProtobufList();
    }
    /**
     * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
     */
    private void removeSource(int index) {
      ensureSourceIsMutable();
      source_.remove(index);
    }

    public static AstronomicalSourcesProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourcesProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourcesProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourcesProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourcesProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static AstronomicalSourcesProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static AstronomicalSourcesProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourcesProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static AstronomicalSourcesProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourcesProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static AstronomicalSourcesProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static AstronomicalSourcesProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(AstronomicalSourcesProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A collection of AstronomicalSources
     * </pre>
     *
     * Protobuf type {@code stardroid_source.AstronomicalSourcesProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          AstronomicalSourcesProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:stardroid_source.AstronomicalSourcesProto)
        AstronomicalSourcesProtoOrBuilder {
      // Construct using com.google.android.stardroid.source.proto.SourceProto.AstronomicalSourcesProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      @Override
      public java.util.List<AstronomicalSourceProto> getSourceList() {
        return java.util.Collections.unmodifiableList(
            instance.getSourceList());
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      @Override
      public int getSourceCount() {
        return instance.getSourceCount();
      }/**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      @Override
      public AstronomicalSourceProto getSource(int index) {
        return instance.getSource(index);
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder setSource(
          int index, AstronomicalSourceProto value) {
        copyOnWrite();
        instance.setSource(index, value);
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder setSource(
          int index, AstronomicalSourceProto.Builder builderForValue) {
        copyOnWrite();
        instance.setSource(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder addSource(AstronomicalSourceProto value) {
        copyOnWrite();
        instance.addSource(value);
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder addSource(
          int index, AstronomicalSourceProto value) {
        copyOnWrite();
        instance.addSource(index, value);
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder addSource(
          AstronomicalSourceProto.Builder builderForValue) {
        copyOnWrite();
        instance.addSource(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder addSource(
          int index, AstronomicalSourceProto.Builder builderForValue) {
        copyOnWrite();
        instance.addSource(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder addAllSource(
          Iterable<? extends AstronomicalSourceProto> values) {
        copyOnWrite();
        instance.addAllSource(values);
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder clearSource() {
        copyOnWrite();
        instance.clearSource();
        return this;
      }
      /**
       * <code>repeated .stardroid_source.AstronomicalSourceProto source = 1;</code>
       */
      public Builder removeSource(int index) {
        copyOnWrite();
        instance.removeSource(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:stardroid_source.AstronomicalSourcesProto)
    }
    @Override
    @SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new AstronomicalSourcesProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            Object[] objects = new Object[] {
              "source_",
              AstronomicalSourceProto.class,
            };
            String info =
                "\u0001\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<AstronomicalSourcesProto> parser = PARSER;
          if (parser == null) {
            synchronized (AstronomicalSourcesProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<AstronomicalSourcesProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:stardroid_source.AstronomicalSourcesProto)
    private static final AstronomicalSourcesProto DEFAULT_INSTANCE;
    static {
      AstronomicalSourcesProto defaultInstance = new AstronomicalSourcesProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        AstronomicalSourcesProto.class, defaultInstance);
    }

    public static AstronomicalSourcesProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AstronomicalSourcesProto> PARSER;

    public static com.google.protobuf.Parser<AstronomicalSourcesProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
